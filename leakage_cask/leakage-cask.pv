(*
time proverif group_signatures_phases.pv
real 2m5,454s
user 2m5,095s
sys 0m0,328s
*)


free ch:channel. 	(* Public channel *)

type pkey.
type skey.
type result.
type gmskey.
type gskey.
type gpkey.
type certype.

const revoke_request:bitstring.
const groupkey_request:bitstring.
const groupkey_response:bitstring.

free vid:bitstring [private].	(* the secret *)

(* Asymmetric signature *)
fun pk(skey):pkey.
fun sign(bitstring, skey):bitstring.
fun ok():result.
reduc forall m:bitstring, sk:skey; checksign(sign(m, sk), m, pk(sk)) = ok().

(* Asymmetric encryption *)
fun aenc(bitstring, pkey):bitstring.
reduc forall m:bitstring, sk:skey; adec(aenc(m, pk(sk)), sk) = m.

(* Certificate *)
fun cert(bitstring, pkey, skey):certype [private].
reduc forall vid:bitstring, vpk:pkey, sk:skey; checkcert(cert(vid, vpk, sk), pk(sk)) = ok().
reduc forall vid:bitstring, vpk:pkey, sk:skey; getpk(cert(vid, vpk, sk)) = vpk.
reduc forall vid:bitstring, vpk:pkey, sk:skey; getid(cert(vid, vpk, sk)) = vid.

(* Group signature *)
					(* Group master secret key: gmsk *)
fun gpk(gmskey):gpkey.			(* Group public key: gpk(gmsk) *)
fun gsk(bitstring, gmskey):gskey.	(* Vehicle private group secret key: gsk(vid, gmsk) *)
fun gsign(bitstring, gskey):bitstring.	(* gsign(m, gsk) *)
fun gok():result.
(* reduc forall m:bitstring, vid:bitstring, gmsk:gmskey; gchecksign(gsign(m, gsk(vid, gmsk)), m, gpk(gmsk)) = gok().
   reduc forall m:bitstring, vid:bitstring, gmsk:gmskey; gopen(gsign(m, gsk(vid, gmsk)), gmsk) = vid.	*)

(* Pseudonym certificate *)
fun pseudocert(pkey, gskey):certype.
reduc forall pseudopk:pkey, vid:bitstring, gmsk:gmskey; checkpseudocert(pseudocert(pseudopk, gsk(vid, gmsk)), gpk(gmsk)) = gok().
reduc forall pseudopk:pkey, vid:bitstring, gmsk:gmskey; getpseudopk(pseudocert(pseudopk, gsk(vid, gmsk))) = pseudopk.
reduc forall pseudopk:pkey, vid:bitstring, gmsk:gmskey; gopen(pseudocert(pseudopk, gsk(vid, gmsk)), gmsk) = vid.
reduc forall pseudopk:pkey, vid:bitstring, gmsk:gmskey; getvid(pseudocert(pseudopk, gsk(vid, gmsk))) = vid [private].


(* Revoked certificates table *)
table revokedcerts(bitstring).		(* vid of the revoked vehicle *)


(* Events *)
event ValidGroupPrivateKeyReceived(bitstring, gskey, gpkey).
event ValidGroupPrivateKeySent(bitstring, gskey, gpkey).
event ValidGroupKeyRequestReceived(skey, bitstring).
event ValidGroupKeyRequestSent(bitstring).
event RevokedCannotGetGroupKey(bitstring).
event ValidMessageSent(bitstring, certype, bitstring).
event PseudoCertCreated(bitstring, skey).

event ValidMessageReceived(bitstring, bitstring).
event AttackerGetsEnrollmentCertificate(bitstring, pkey).
event RevocationAsked(bitstring, certype, certype).
event ValidRevocationReportReceived(certype, certype).
event RevokedVid(bitstring).
event AlreadyRevoked(bitstring).
event ValidMessageReceivedSenderVid(bitstring).
event CASKReveal(skey).
event CAGMSKReveal(gmskey).


(* Queries *)

(* Q1.1 - Sanity check: Vehicle can get a valid group key - result: not event FALSE (in both phases) 
query vid:bitstring, vgsk:gskey, vgpk:gpkey; event(ValidGroupPrivateKeyReceived(vid, vgsk, vgpk)).*)

(* Q1.2 - Sanity check: Attacker can get a valid group key - result: FALSE - TRUE 
query vid:bitstring, vgsk:gskey, vgpk:gpkey;  event(ValidGroupPrivateKeySent(vid, vgsk, vgpk)) ==> event(ValidGroupKeyRequestSent(vid)).	
query vid:bitstring, vgsk:gskey, vgpk:gpkey, attpk:pkey; 
	event(ValidGroupPrivateKeySent(vid, vgsk, vgpk)) ==> event(ValidGroupKeyRequestSent(vid)) || event(AttackerGetsEnrollmentCertificate(vid, attpk)).*)
(* Q1.3 - Sanity check: Vehicle/Attacker cannot get a valid group key when it is revoked - result: FALSE, TRUE 
query vid:bitstring; event(RevokedCannotGetGroupKey(vid)).
query vid:bitstring; event(RevokedCannotGetGroupKey(vid)) ==> event(RevokedVid(vid)).*)
(* Q1.4 - Sanity check: Vehicle sends broadcast message - result: FALSE 
query vid:bitstring, vpseudocert:certype, m:bitstring; event(ValidMessageSent(vid, vpseudocert, m)).*)
(* Q1.5 - Sanity check: Attacker sends broadcast message - result: FALSE, TRUE 
query sendervid:bitstring, vpseudocert:certype, receivervid:bitstring, m:bitstring;
	event(ValidMessageReceived(receivervid, m)) ==> event(ValidMessageSent(sendervid, vpseudocert, m)).
query sendervid:bitstring, vpseudocert:certype, receivervid:bitstring, m:bitstring, attpk:pkey;
	event(ValidMessageReceived(receivervid, m)) ==> event(ValidMessageSent(sendervid, vpseudocert, m)) || event(AttackerGetsEnrollmentCertificate(sendervid, attpk)).*)
(* Q1.6 - Sanity check: not event AlreadyRevoked - result: FALSE 
query vid:bitstring; event(AlreadyRevoked(vid)).*)
(* Q1.7 - Sanity check: attacker can ask revocation of another vehicle - result: FALSE 
query torevokecert:certype, vcert:certype, vid:bitstring; event(ValidRevocationReportReceived(torevokecert, vcert)) ==> event(RevocationAsked(vid, vcert, torevokecert)).
query torevokecert:certype, vcert:certype, vid:bitstring, attpk:pkey; 
	event(ValidRevocationReportReceived(torevokecert, vcert)) ==> event(RevocationAsked(vid, vcert, torevokecert)) || event(AttackerGetsEnrollmentCertificate(vid, attpk)).*)

(* Qx.x - Temporal constraint: revoked cannot get key and revoke event - result: cannot be proved 
query vid:bitstring, t1:time, t2:time; event(RevokedCannotGetGroupKey(vid))@t2 && event(RevokedVid(vid))@t1 ==> t1 < t2.*) 

(* Qx.2 - Temporal constraint: cannot receive a valid message from a vehicle that has been removed *)
query sendervid:bitstring, vpseudocert:certype, receivervid:bitstring, m:bitstring, t1:time, t2:time, t3:time; 
	event(ValidMessageSent(sendervid, vpseudocert, m))@t1 && event(ValidMessageReceived(receivervid, m))@t2 && event(RevokedVid(sendervid))@t3 ==> t1 < t2 && t2 < t3.(*
(* ATTACK FOUND attacker sends -> (m, sign(m, oldsk), pseudocert(pk(oldsk), sign using new gsk) *)

(* Qx.3 - FALSE *)
query sendervid:bitstring, t1:time, t2:time; event(ValidMessageReceivedSenderVid(sendervid))@t1 && event(RevokedVid(sendervid))@t2 ==> t1 < t2.

(* Q2.1 - Authentication of CA in Vehicle Registration - result: TRUE *)
query vid:bitstring, vgsk:gskey, vgpk:gpkey, cask:skey; event(ValidGroupPrivateKeyReceived(vid, vgsk, vgpk)) 
	==> event(ValidGroupPrivateKeySent(vid, vgsk, vgpk)) || attacker(cask).
	
(* Q2.2 - Authentication of the Vehilce in Vehicle Registration - result: *)
query cask:skey, vid:bitstring, attpk:pkey; 
	event(ValidGroupKeyRequestReceived(cask, vid)) ==> event(ValidGroupKeyRequestSent(vid)) || event(AttackerGetsEnrollmentCertificate(vid, attpk)).
*)
(* Q3 - Weak secrecy: the identity of the vehicle should remain secret (reachability property)
query attacker(new vid).		 *)		(* TODO: per ora decommento il fatto che ci pu√≤ essere gmsk leackage, si potrebbero differenziare i casi
						   	e vedere cosa succede 1) rivelando la cask 2) rivelando gmsk *)	

let CASecretKeyReveal(cask:skey) = 
	event CASKReveal(cask);
	out(ch, cask).
	
let CAGroupMasterSecretKeyReveal(gmsk:gmskey) =
	event CAGMSKReveal(gmsk);
	out(ch, gmsk).


let VehicleSendMessages(vid:bitstring, vgsk:gskey) = 
	(* Create the pseudonym certificate *)
	new vpseudosk:skey;
	let vpseudopk = pk(vpseudosk) in
	let vpseudocert = pseudocert(vpseudopk, vgsk) in
	event PseudoCertCreated(vid, vpseudosk);
	
	(* Vehicle can send multiple messages with the same pseudocert *)
	!(	(* Broadcast message to send *)
		new m:bitstring;
		(* Sign the message *)
		let signm = sign(m, vpseudosk) in
		event ValidMessageSent(vid, vpseudocert, m);
		out(ch, (m, signm, vpseudocert))
	).


let VehicleReceiveMessage(vid:bitstring, vgpk:gpkey) = 
	in(ch, (m:bitstring, signm:bitstring, vpseudocert:certype));
	(* Check pseudonym certificate*)
	if checkpseudocert(vpseudocert, vgpk) = gok() then
	(* Check message signature *)
	let vpseudopk = getpseudopk(vpseudocert) in
	if checksign(signm, m, vpseudopk) = ok() then
	
	(* Correct message *)
	event ValidMessageReceived(vid, m);
	event ValidMessageReceivedSenderVid(getvid(vpseudocert)).


let VehicleReport(vid:bitstring, vsk:skey, vcert:certype, capk:pkey, vgpk:gpkey) = 
	(* Vehicle receives an anonimous message *)
	in(ch, (m:bitstring, signm:bitstring, vpseudocert:certype));
	(* Check pseudonym certificate*)
	if checkpseudocert(vpseudocert, vgpk) = gok() then
	(* Check message signature *)
	let vpseudopk = getpseudopk(vpseudocert) in
	if checksign(signm, m, vpseudopk) = ok() then
	
	(* ... Vehicle understands this is a malicious message ... *)
	(* Generates a report for the CA *)
	let report = (vpseudocert, revoke_request) in
	let signreport = sign(report, vsk) in
	let encrevreq = aenc((report, signreport, vcert), capk) in

	event RevocationAsked(vid, vcert, vpseudocert);
	out(ch, encrevreq).
	

let VehicleRegistration(vid:bitstring, vsk:skey, vcert:certype, capk:pkey) =
	(**  REGISTRATION **)
	(* Request group private and public key *)
	let req = groupkey_request in
	let signreq = sign(req, vsk) in
	let encsignreq = aenc((req, signreq, vcert), capk) in
	
	event ValidGroupKeyRequestSent(vid); 
	out(ch, encsignreq);
	in(ch, encsignresp:bitstring);
	
	(* Decrypt the response *)
	let (resp:bitstring, signature:bitstring) = adec(encsignresp, vsk) in
	(* Check signature *)
	if checksign(signature, resp, capk) = ok() then
	(* Check vid in the response *)
	let (=groupkey_response, rvid:bitstring, vgsk:gskey, vgpk:gpkey) = resp in
	if rvid = vid then
	
	event ValidGroupPrivateKeyReceived(vid, vgsk, vgpk);

	( !VehicleSendMessages(vid, vgsk) | !VehicleReceiveMessage(vid, vgpk) | !VehicleReport(vid, vsk, vcert, capk, vgpk) ).
	

		
let CARegister(gmsk:gmskey, cask: skey, capk:pkey) = 
	in(ch, encsignreq:bitstring);
	(* Decrypt the request *)
	let (req:bitstring, signreq:bitstring, vcert:certype) = adec(encsignreq, cask) in
	
	if req = groupkey_request then
	(* Check vehicle enrollment certificate *)
	if checkcert(vcert, capk) = ok() then
	let vpk = getpk(vcert) in
	let vid = getid(vcert) in
	(* Check if the enrollment certificate is revoked *)
	get revokedcerts(=vid) in 
	event RevokedCannotGetGroupKey(vid); 0 
	else
	(* Check signature on request *)
	if checksign(signreq, req, vpk) = ok() then

	event ValidGroupKeyRequestReceived(cask, vid);
	
	(* Create new group private secret key *)
	let vgsk = gsk(vid, gmsk) in
	let resp = (groupkey_response, vid, vgsk, gpk(gmsk)) in
	let signresp = sign(resp, cask) in
	let encsignresp = aenc((resp, signresp), vpk) in
	
	event ValidGroupPrivateKeySent(vid, vgsk, gpk(gmsk));
	out(ch, encsignresp).
	
	
let CARevoke(gmsk:gmskey, cask: skey, capk:pkey) = 
	(* CA receives a revocation request *)
	in(ch, encrevreq:bitstring);
	(* Decrypt the report *)
	let (report:bitstring, signreport:bitstring, vcert:certype) = adec(encrevreq, cask) in

	(* Check vehicle enrollment certificate *)
	if checkcert(vcert, capk) = ok() then
	let vpk = getpk(vcert) in
	let vid = getid(vcert) in
	(* Check if the enrollment certificate is revoked *)
	get revokedcerts(=vid) in 0 else
	(* Check signature on request *)
	if checksign(signreport, report, vpk) = ok() then
	let (torevokecert:certype, =revoke_request) = report in
	
	event ValidRevocationReportReceived(torevokecert, vcert);
	
	(* Extract the vid from cert *)
	let torevokevid = gopen(torevokecert, gmsk) in
	
	(* Check that has not already been revoked *)
	get revokedcerts(=torevokevid) in event AlreadyRevoked(torevokevid)
	else
	
	event RevokedVid(torevokevid);
	insert revokedcerts(torevokevid);
	
	phase 1;
	(* Update group master secret key *)
	new updatedgmsk:gmskey;
	(* Start new phase: not revoked vehicles have to ask for a new key *)
	phase 2;
	!CARegister(updatedgmsk, cask, capk).


process 
	(* Create CA group master secret key, public key and private key*)
	new gmsk:gmskey; new cask:skey; 
	let capk = pk(cask) in
	out(ch, capk);
	(* Create vehicles *)
	(	(* Enrollment certificate *)
		new vid:bitstring; 
		new vsk:skey; 
		let vpk = pk(vsk) in
		let vcert = cert(vid, vpk, cask) in	
		( VehicleRegistration(vid, vsk, vcert, capk) | 
		  phase 2;
		  VehicleRegistration(vid, vsk, vcert, capk)
		)
	  )
	(* Attacker can get enrollment certificates *)
	|!(	(* Attacker enrollment certificate *)
		new attvid:bitstring;
		new attsk:skey;
		let attpk = pk(attsk) in
		let attcert = cert(attvid, attpk, cask) in
		event AttackerGetsEnrollmentCertificate(attvid, attpk);
		out(ch, (attvid, attsk, attcert))
	)	
	| !CARegister(gmsk, cask, capk)
	| !CARevoke(gmsk, cask, capk)
(*	 | CASecretKeyReveal(cask)
	| CAGroupMasterSecretKeyReveal(gmsk) *)

